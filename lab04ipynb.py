# -*- coding: utf-8 -*-
"""Lab04ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wjWefGSsVL_F79i5ZlaAaUOzguEV-hY2
"""

# TASK 1

class Customer:
    total_tickets_allowed = 3
    ticket_price_over_10 = 100
    ticket_price_under_10 = 50


    def __init__(self):
        self.tickets = []
        self.total_price = 0
        print("Welcome to ABC Memorial Park")

    def buyTicket(self, name, age):
        if len(self.tickets) < self.total_tickets_allowed:
            if age > 10:
                self.tickets.append((name, self.ticket_price_over_10))
                self.total_price += self.ticket_price_over_10
                print(f"Successfully purchased a ticket for {name}!")
            else:
                self.tickets.append((name, self.ticket_price_under_10))
                self.total_price += self.ticket_price_under_10
                print(f"Successfully purchased a ticket for {name}!")
        else:
            print("You can't buy more than 3 tickets")

    def showDetails(self):
        print("Amount of tickets:", len(self.tickets))
        print(f"Total price: {self.total_price} Taka")

# Driver Code
print('1-------------------------')
customer1 = Customer()
print('2-------------------------')
customer1.buyTicket('Bob', 23)
customer1.buyTicket('Henry', 7)
customer1.buyTicket('Alexa', 30)
customer1.buyTicket('Jonas', 43)
print('3-------------------------')
customer1.showDetails()
print('4-------------------------')
customer2 = Customer()
print('5-------------------------')
customer2.buyTicket('Harry', 60)
customer2.buyTicket('Tomas', 28)
print('6-------------------------')
customer2.showDetails()

#TASK 2
class Panda:

    def __init__(self, name, gender, age):
        self.name = name
        self.gender = gender
        self.age = age

    def sleep(self, hour=None):
        self.hour = hour

        if hour is None:
            return "{}'s duration is unknown thus should have only bamboo leaves".format(self.name)
        elif 3 <= hour <= 5:
            return "{} sleeps {} hours daily and should have Mixed Veggies".format(self.name, self.hour)
        elif 6 <= hour <= 8:
            return "{} sleeps {} hours daily and should have Eggplant & Tofu".format(self.name, self.hour)
        elif 9 <= hour <= 11:
            return "{} sleeps {} hours daily and should have Broccoli Chicken".format(self.name, self.hour)


#Driver Code
panda1 = Panda("Kunfu", "Male", 5)
panda2 = Panda("Pan Pan", "Female",3)
panda3 = Panda("Ming Ming", "Female",8)
print("{} is a {} Panda Bear who is {} years old".format(panda1.name,panda1.gender,panda1.age))
print("{} is a {} Panda Bear who is {} years old".format(panda2.name,panda2.gender,panda2.age))
print("{} is a {} Panda Bear who is {} years old".format(panda3.name,panda3.gender,panda3.age))
print("===========================")
print(panda2.sleep(10))
print(panda1.sleep(4))
print(panda3.sleep(13))

#task 3
class GreenPhone:
    def __init__(self, model_name, android_version, num_cameras):
        self.phone_company = "GreenPhone"
        self.model_name = model_name
        self.android_version = android_version
        self.num_cameras = num_cameras

    def showSpecification(self):
        print("Phone Company:", self.phone_company)
        print("Model Name:", self.model_name)
        print("Android Version:", self.android_version)
        print("Number of Cameras:", self.num_cameras)

    def updatePhone(self):
        self.android_version += 1
        print(f"Your phone {self.phone_company} {self.model_name} is upgraded to Android Version: {self.android_version}.")


print('1=======================')
p1 = GreenPhone('A1', 12, 3)
p2 = GreenPhone('M11', 12, 4)
p3 = GreenPhone('U20', 12, 5)
p1.showSpecification()
print('2=======================')
p2.showSpecification()
print('3=======================')
p1.updatePhone()
print('4=======================')
p1.updatePhone()
p2.updatePhone()
p3.updatePhone()
print('5=======================')
p1.updatePhone()
p2.updatePhone()
p3.updatePhone()
print('6=======================')
p2.updatePhone()
p3.updatePhone()
print('7=======================')
p1.showSpecification()
p3.showSpecification()

class StudentDatabase:
    def __init__(self, name, student_id):
        self.name = name
        self.student_id = student_id
        self.grades = {}

    def calculateGPA(self, courses, semester):
        credit_hours = 3
        grade_points = {'4.0': 4.0, '3.7': 3.7, '3.3': 3.3, '3.0': 3.0, '2.7': 2.7, '2.3': 2.3, '2.0': 2.0,
                        '1.7': 1.7, '1.3': 1.3, '1.0': 1.0, '0.7': 0.7, '0.0': 0.0}

        gpa_sum = 0
        credits_attempted = 0

        for course in courses:
            course_name, grade_str = course.split(':')
            grade = grade_str.strip()  # Remove leading/trailing spaces
            gpa_sum += grade_points.get(grade, 0) * credit_hours
            credits_attempted += credit_hours

        gpa = gpa_sum / credits_attempted
        if semester not in self.grades:
            self.grades[semester] = {}
        self.grades[semester][tuple(course_name for course_name, _ in (course.split(':') for course in courses))] = round(gpa, 2)

    def printDetails(self):
        print(f'Name: {self.name}\nID: {self.student_id}')
        for semester, courses in self.grades.items():
            print(f'Courses taken in {semester}:')
            for course_set, gpa in courses.items():
                for course in course_set:
                    print(course)
                print(f'GPA: {gpa}')



# Driver code
# Write your code here
s1 = StudentDatabase('Pietro', '10101222')
s1.calculateGPA(['CSE230: 4.0', 'CSE220: 4.0',
'MAT110: 4.0'], 'Summer2020')
s1.calculateGPA(['CSE250: 3.7', 'CSE330: 4.0'],
'Summer2021')
print(f'Grades for {s1.name}\n{s1.grades}')
print('---------------------------------')
s1.printDetails()
s2 = StudentDatabase('Wanda', '10103332')
s2.calculateGPA(['CSE111: 3.7', 'CSE260: 3.7',
'ENG101: 4.0'], 'Summer2022')
print('---------------------------------')
print(f'Grades for {s2.name}\n{s2.grades}')
print('---------------------------------')
s2.printDetails()

